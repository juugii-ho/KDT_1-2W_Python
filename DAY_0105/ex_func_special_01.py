# -----------------------------------------------------------------
# 다양한 함수의 형태 - 특별한 함수 (1)
# - 매개변수의 갯수를 유동적으로 가변으로 하는 함수
# - 형태 : def 함수명(*data):
# - 이름 : 가변 인자 함수
# - 매개변수 갯수 : 0개 ~ N개
# -----------------------------------------------------------------
# 2개 정수를 덧셈 후 결과를 반환하는 함수 생성-------------------------------
def addTwo(x, y):
    return x + y
print(addTwo(3, 5))

# 5개 정수를 덧셈 후 결과를 반환하는 함수 생성-------------------------------
def addFive(a, b, c, d, e):
    return a + b + c + d + e
print(addFive(1,2,3,4,5))

# 3개 정수를 덧셈 후 결과를 반환하는 함수 생성-------------------------------
def addThree(x, y, z):
    return x + y + z
print(addThree(1,2,3))

# 7개 정수를 덧셈 후 결과를 반환하는 함수 생성-------------------------------
def addSeven(x, y, z, a, b, c, d):
    return x + y + z + a + b + c + d
print(addSeven(1,2,3, 4, 5, 6, 7))

# -----------------------------------------------------------------
# 함수 기능 : 전달 받은 숫자를 모두 덧셈한 결과 반환 함수
# 함수 이름 : addNumber
# 매개 변수 : *nums
# 반 환 값 : 계산결과
# -----------------------------------------------------------------

def addNumber(*data):
    print((type(data)))
    ret = 0
    for d in data: ret += d
    print(ret)

# 함수 사용 즉, 함수 호출----------------------------------------------
addNumber(1,2,3)
addNumber(10)
addNumber(1,2,3,4,5,6,7,8,9,1,1,2,3,4,5,6,7)

# * : 시퀀스/반복이 가능한 객체 => 내부에 모든 원소를 하나씩 풀어서 전달(언팩킹)
addNumber(*(range(1,11)))

a = [11,22,33,44]
aTuple = 'a', 'b', 'c'
aDict = {'jj' : 'Hong', 'age':100}

print(*a, sep='-')
print(a, aTuple)
print(*aTuple, sep='-')     # * 애스터리스크
print(*aDict, sep='-')      # * 한 개면 key만
print(**aDict, sep='-')     # ** 두 개일 때는 key=value형태로 되는데 print()는 **가안 됨

# print()는 (), (1), (1,2,3,) 처럼 다양한 인자가 가능함 => *values 가변인자 사용

